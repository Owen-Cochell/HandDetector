{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","webcamRef","useRef","canvasRef","drawing","pred","canv","length","forEach","cord","landmarks","index","x","console","log","y","beginPath","arc","Math","PI","fillStyle","fill","handsUp","_ref","Object","asyncToGenerator","_regeneratorRuntime","mark","_callee","hand","wrap","_context","prev","next","handpose","sent","setInterval","track","stop","apply","this","arguments","_ref2","_callee2","v","vH","vW","detect","GE","gesture","_context2","current","video","readyState","videoHeight","videoWidth","height","width","estimateHands","fp","ThumbsUpGesture","fpg","thumbsDownGesture","fingerSplayedGesture","VictoryGesture","estimate","gestures","document","getElementById","innerHTML","name","getContext","_x","react_default","a","createElement","className","react_webcam_default","ref","style","position","margin","textAlign","id","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.fa59a26c.chunk.js","sourcesContent":["import React, {useRef,useState} from 'react' //Allows to use Referances\r\nimport * as tf from '@tensorflow/tfjs'//Brings in Tensorflow\r\nimport * as handpose from '@tensorflow-models/handpose'//Brings in Handpose from Tfjs\r\nimport Webcam from 'react-webcam'//Brings in React's web cam\r\nimport * as fp from 'fingerpose'//Key for detecting our hand gestures\r\nimport * as fpg from 'fingerpose-gestures'; // Bring in some extra gestures\r\nimport './App.css';\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  const webcamRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n\r\n  const drawing=(pred,canv)=>{\r\n\r\n    if(pred.length >0){\r\n      //Check whether array is empty or not\r\n      pred.forEach((pred) => {\r\n        //For each and every non empty array\r\n        const cord=pred.landmarks//Grab all the co-ordinates\r\n  \r\n        //Now let's go through each co-ordinate\r\n        for (let index = 0; index < cord.length; index++) {\r\n          const x=cord[index][0]\r\n          console.log(x)\r\n  \r\n          const y=cord[index][1]\r\n          console.log(y)\r\n  \r\n          //Let's draw\r\n          canv.beginPath()\r\n          canv.arc(x,y,5,0,3*Math.PI)\r\n          canv.fillStyle='red'\r\n          canv.fill()\r\n          \r\n        }\r\n      });\r\n  \r\n    }\r\n  }\r\n\r\n  const handsUp=async()=>{\r\n\r\n    const hand=await handpose.load()\r\n    console.log('====================================');\r\n    console.log('Handpose is all set!!!!!');\r\n    console.log('====================================');\r\n    setInterval(() => {\r\n      track(hand)\r\n    }, 100)//Run after every 100msec\r\n  }//Loading Tensorflow's Handpose  \r\n\r\n  const track=async(hand)=>{\r\n\r\n    if(typeof webcamRef.current !== \"undefined\" &&\r\n    webcamRef.current !== null &&\r\n    webcamRef.current.video.readyState === 4){\r\n    \r\n      const v=webcamRef.current.video\r\n      const vH=webcamRef.current.video.videoHeight\r\n      const vW=webcamRef.current.video.videoWidth//Grabbing video properties\r\n\r\n      webcamRef.current.video.height=vH\r\n      webcamRef.current.video.width=vW//Setting new properties\r\n\r\n      canvasRef.current.height=vH\r\n      canvasRef.current.width=vW\r\n      \r\n      const detect=await hand.estimateHands(v)\r\n      console.log('====================================');\r\n      console.log(detect);\r\n      console.log('====================================');\r\n\r\n      //Let's detect our gestures\r\n      if (detect.length>0) {\r\n        const GE = new fp.GestureEstimator([//Setting up gesture estimator\r\n          fp.Gestures.ThumbsUpGesture,\r\n          fpg.Gestures.thumbsDownGesture,\r\n          fpg.Gestures.fingerSplayedGesture,\r\n          fp.Gestures.VictoryGesture,\r\n      ])\r\n      const gesture=await GE.estimate(detect[0].landmarks,8)//Confidence lvl is 8\r\n\r\n      console.log('====================================');\r\n      console.log(gesture)//Check consol\r\n      console.log('====================================');\r\n\r\n      if (gesture.gestures.length > 0) {\r\n\r\n        document.getElementById('App-text').innerHTML = gesture.gestures[0].name;\r\n      }\r\n\r\n      else {\r\n        document.getElementById('App-text').innerHTML = 'Unknown Gesture';\r\n      }\r\n      }\r\n\r\n      else {\r\n        document.getElementById('App-text').innerHTML = 'No Hands Detected'\r\n      }\r\n\r\n      const canv=canvasRef.current.getContext('2d')\r\n      drawing(detect, canv)\r\n\r\n    }\r\n\r\n  }//Now let's detect our hand and it's position\r\n  handsUp()\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n          <Webcam ref={webcamRef}\r\n            style={{\r\n              position:'absolute',\r\n              margin:'auto',\r\n              textAlign:'center',\r\n              width:900,\r\n              height:800\r\n            }}\r\n          />\r\n          <canvas ref={canvasRef}\r\n            style={{\r\n              position:'absolute',\r\n              margin:'auto',\r\n              textAlign:'center',\r\n              width:900,\r\n              height:800\r\n            }}\r\n          />\r\n      </header>\r\n      <p id='App-text'>No Hands Detected</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}